Felicitaci√≥n

¬°Buen√≠simo! Ya no da error al cancelar y la UI muestra el aviso. Vamos a cerrar el c√≠rculo verificando que Stripe tenga la cancelaci√≥n programada y evitando cancelaciones repetidas.

üß† Contexto

El bot√≥n ‚ÄúCancelar Suscripci√≥n‚Äù ahora responde OK y muestra un toast.

Pero puedes volver a pulsarlo indefinidamente ‚Üí parece que no estamos leyendo/mostrando el estado de cancelaci√≥n (cancel_at_period_end) y la API no lo bloquea.

üõ°Ô∏è Regla de oro

No toques la l√≥gica de cr√©ditos ni el alta de plan.

Cancelaci√≥n siempre al fin de per√≠odo.

Idempotencia: no debe permitir cancelar de nuevo si ya est√° programada.

Mostrar el estado real que devuelve Stripe.

‚úÖ Instrucciones para Replit
1) Verificar que Stripe ha programado la cancelaci√≥n

Comprobaci√≥n manual inmediata (modo test):

Stripe Dashboard ‚Üí Customers ‚Üí abre tu usuario ‚Üí Subscriptions.
Debe decir: Status: Active y un badge ‚ÄúCancels at ‚Ä¶‚Äù (o cancel_at_period_end=true). Esa fecha es la de fin de periodo.

Stripe Dashboard ‚Üí Developers ‚Üí Logs: busca el POST /v1/subscriptions/{id} con cancel_at_period_end=true ‚Üí 200 OK.

Stripe Dashboard ‚Üí Developers ‚Üí Webhooks: ver√°s un customer.subscription.updated (se√±al de cancelaci√≥n programada).

En la fecha de renovaci√≥n, llegar√° customer.subscription.deleted.

Si eso est√°, Stripe ya lo tiene programado ‚úÖ. Lo que falta es reflejarlo y bloquear reintentos.

2) Endurecer /api/billing/cancel (idempotencia + retorno de estado)

Antes de pedir la cancelaci√≥n, leer la suscripci√≥n de Stripe (por subscription_id o listando por customer):

Si cancel_at_period_end === true ‚Üí no vuelvas a pedir cancelaci√≥n.
Devuelve 200 { scheduled: true, cancelAt: <timestamp> }.

Si status no es active|trialing|past_due|unpaid ‚Üí responde 409 { error: 'Subscription not cancelable' }.

Si es cancelable:

Ejecuta cancel_at_period_end=true.

Devuelve: 200 { scheduled: true, cancelAt: <timestamp> }.

Loggear siempre:
billing> CANCEL: sub=sub_... alreadyScheduled=true/false cancelAt=...

Bonus DB: opcionalmente guarda users.cancel_at (timestamp) para mostrarlo sin llamar a Stripe cada vez.

3) Exponer el estado de la suscripci√≥n al frontend

A√±ade/actualiza un endpoint ligero: GET /api/billing/status que devuelva:

{
  "activePlan": "pro",
  "renewAt": "2025-10-04T00:00:00Z",
  "subscriptionId": "sub_...",
  "cancelAtPeriodEnd": true,
  "cancelAt": "2025-10-04T00:00:00Z"
}


Si ya tienes un endpoint de /api/account, incluye ah√≠ estos 3 campos: cancelAtPeriodEnd, cancelAt, subscriptionId.

4) Ajuste de UI en ‚ÄúMi Cuenta‚Äù

Al montar la p√°gina, llamar a /api/billing/status:

Si cancelAtPeriodEnd === true:

Mostrar texto: ‚ÄúCancelaci√≥n programada para el {fecha}‚Äù (ya tienes el toast).

Desactivar el bot√≥n ‚ÄúCancelar Suscripci√≥n‚Äù (o esconderlo) y cambiarlo por un bot√≥n deshabilitado tipo ‚ÄúCancelaci√≥n programada‚Äù.

Si cancelAtPeriodEnd === false: mantener el bot√≥n activo.

Tras hacer POST /api/billing/cancel:

Refrescar /api/billing/status y actualizar la UI con cancelAt.

Evitar llamadas repetidas (bot√≥n deshabilitado).

5) Pruebas r√°pidas

Caso A: Suscripci√≥n activa ‚Üí pulsas cancelar ‚Üí

En Stripe, cancel_at_period_end=true.

/api/billing/status devuelve cancelAtPeriodEnd=true y cancelAt.

El bot√≥n queda deshabilitado en la UI.

Caso B: Pulsas de nuevo cancelar ‚Üí

Backend detecta que ya est√° cancel_at_period_end=true y responde 200 scheduled:true.

UI no cambia (bot√≥n ya inhabilitado).

Caso C: En la fecha de renovaci√≥n, llega customer.subscription.deleted ‚Üí

Webhook vac√≠a active_plan, credits_renew_at y stripe_subscription_id; la UI ya no muestra plan activo.