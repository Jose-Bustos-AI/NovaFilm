De lujo c√≥mo va quedando! üëè

‚úÖ Contexto (muy breve)

La app ya funciona: generaci√≥n con Kie, DB Neon (Drizzle), jobs/videos/usuarios, cr√©ditos y ‚ÄúMi Cuenta‚Äù.

Hoy no queremos montar OAuth (Google/GitHub).

Queremos un login r√°pido por email + contrase√±a como paso intermedio, sin romper nada (dashboard, cr√©ditos, galer√≠a, webhooks, etc.).

üß± REGLA DE ORO

No rompas el login actual ni nada del flujo de generaci√≥n. A√±ade login local (email/contrase√±a) como capa adicional y deja listo el switch para migrar a OAuth ma√±ana. Si algo entra en conflicto, mant√©n el comportamiento anterior por defecto y habilita el nuevo con una flag.

üîß Instrucciones para Replit (implementaci√≥n exacta)
1) Feature: Login local m√≠nimo (email + contrase√±a) con sesiones

Objetivo: permitir registrarse, iniciar/cerrar sesi√≥n y usar la app con sesi√≥n de express-session (ya en uso con connect-pg-simple).

Hash de contrase√±a: usa argon2 (preferido) o bcrypt. No guardes contrase√±as en claro.

Rate limiting: 10 intentos / 10 min por IP+email en /api/auth/login.

Campos obligatorios de registro: email, password, (opcional first_name, last_name).

Reglas password: min 8 chars; si falla, responde 400 con mensaje claro.

Sesi√≥n: a la primera petici√≥n exitosa, guarda req.session.userId = <user.id>.

2) Base de datos (Drizzle + Neon)

Sin migraciones destructivas.

Si users.password_hash no existe, a√±√°delo (nullable) y deja todo lo anterior intacto.

√çndices: users.email UNIQUE (si no existe).

No toques tablas de jobs, videos, sessions, credits_history.

3) Nuevos endpoints (REST)

Todos responden JSON y usan el mismo logger estructurado que a√±adiste:

POST /api/auth/register
Body: { email, password, firstName?, lastName? }
Acciones:

Si el email ya existe y tiene password_hash ‚Üí 409.

Si existe sin password_hash (ven√≠a de Replit OAuth), completa password_hash y sigue.

Crea usuario si no existe (con 10 cr√©ditos por defecto solo si es nuevo).

Inicia sesi√≥n: set req.session.userId.

POST /api/auth/login
Body: { email, password } ‚Üí valida hash ‚Üí set req.session.userId.

POST /api/auth/logout
Destruye sesi√≥n con manejo de errores (si falla, 500; si ok, 200).

GET /api/auth/user
Devuelve perfil sin password_hash. Campos: id, email, first_name, last_name, credits, created_at, plan, profile_image_url.

PATCH /api/account
Body opcional: { firstName?, lastName?, profileImageUrl? }
Usa isAuthenticated y actualiza datos.

POST /api/account/change-password
Body: { currentPassword, newPassword }
Verifica current ‚Üí actualiza hash ‚Üí 200.

Importante: Mant√©n /api/create-job, /api/videos, /api/jobs y el consumo de cr√©ditos exactamente igual, solo que ahora se basan en la sesi√≥n local tambi√©n.

4) Frontend (UI m√≠nima)

Header/Sidebar: a√±ade bot√≥n ‚ÄúEntrar / Registrarse‚Äù si no hay sesi√≥n; si hay sesi√≥n, muestra el nombre y el men√∫ ‚ÄúMi Cuenta / Cerrar sesi√≥n‚Äù (no rompas lo existente).

Modal r√°pido (o p√°gina) con tabs Login / Registro:

Registro: email + password (+ nombre opcional).

Login: email + password.

Mi Cuenta: ya existe; a√±ade secci√≥n ‚ÄúCambiar contrase√±a‚Äù con form {current, new}.

UX: Si un usuario sin sesi√≥n intenta generar video, muestra modal login y bloquea acci√≥n hasta iniciar sesi√≥n.

5) Compatibilidad y flags

Crea env var AUTH_MODE con valores: replit, local, hybrid.

hybrid (por defecto): si hay sesi√≥n Replit, √∫sala; si no, permite login local.

local: fuerza login local.

replit: mantiene el comportamiento actual (por si algo falla).

No elimines nada del flujo de Replit Auth; solo a√±ade.

6) Seguridad m√≠nima

Sanitiza emails (lowercase, trim).

CORS no cambiarlo (mant√©n como est√°).

No exponer password_hash.

Logs: nunca loguees contrase√±as; usa logs estructurados con stage, userId, ip.

7) Aceptaci√≥n (checklist r√°pido)

 Registro ‚Üí sesi√≥n creada ‚Üí dashboard muestra cr√©ditos.

 Login ‚Üí sesi√≥n creada ‚Üí puede generar video (y descuenta 1 cr√©dito).

 Logout ‚Üí sesi√≥n destruida ‚Üí bot√≥n vuelve a ‚ÄúEntrar / Registrarse‚Äù.

 /api/auth/user devuelve el usuario sin hash.

 Cambiar contrase√±a funciona.

 Rate limiting en login activo.

 AUTH_MODE=hybrid permite ambos; replit no cambia nada; local solo local.

 No se rompe la galer√≠a ni el webhook de Kie.