FELICITACIONES

La app ya genera v√≠deos, guarda en Neon, tiene multi-usuario, cr√©ditos y un agente que conversa en espa√±ol. Gran trabajo: estamos en un punto s√≥lido para pulir UX.

üß≠ CONTEXTO

En todas las p√°ginas, al hacer scroll aparece un banner 404 (‚ÄúP√°gina no encontrada‚Ä¶‚Äù) que no corresponde.

En Home el hero aparece duplicado (se renderiza la misma secci√≥n completa dos veces).

En consola se ve un GET /api/auth/user ‚Üí 401 (Unauthorized) cuando el usuario no est√° logueado. Eso no deber√≠a disparar overlays ni warnings ruidosos.

üõ°Ô∏è REGLA DE ORO (NO ROMPER NADA)

No toques nada de generaci√≥n de v√≠deos, llamadas a Kie, cr√©ditos, DB, ni rutas de API.

Cambios estrictamente de UI y manejo de estados para 401/404.

No elimines componentes; si est√°n mal ubicados, mu√©velos o encaps√∫lalos con guard-clauses.

Tras los cambios, la app debe comportarse exactamente igual salvo:
a) No vuelve a aparecer el 404 flotante al hacer scroll.
b) El hero de Home se renderiza una sola vez.
c) Un 401 de /api/auth/user se maneja en silencio (usuario = null), sin errores en consola.

‚úÖ INSTRUCCIONES (paso a paso y precisas)

Eliminar el banner 404 flotante

Busca un componente tipo NotFoundBanner, Global404, Sticky404, o similar que se monte globalmente (probable en App.tsx, RootLayout, MainLayout o un ContentShell).

Si existe un useEffect con window.addEventListener('scroll', ...) que muestra ese banner o fuerza un redirect, elim√≠nalo.

El 404 solo debe mostrarse en la ruta realmente inexistente (route fallback), no como overlay global.

Si tienes una ruta comod√≠n <Route path="*">, que renderice una p√°gina 404 est√°tica o redirija a /, sin superponer UI sobre p√°ginas v√°lidas.

Corregir el hero duplicado en Home

Revisa Home.tsx / Landing.tsx / IndexPage.tsx (o similar). Es muy probable que el hero est√© incluido dos veces:

una en la propia p√°gina, y

otra desde un layout/componente contenedor (p. ej., Layout que inyecta <Hero />).

Deja el <Hero /> solo en un sitio (preferiblemente en la propia p√°gina Home).

Verifica que no exista un Suspense/Skeleton que use el hero como fallback (esto tambi√©n duplica visualmente). En tal caso, cambia el fallback por un placeholder simple, no el hero completo.

Manejo silencioso del 401 en /api/auth/user

Donde se consulta el usuario (p. ej., useQuery('auth/user', ...), getCurrentUser() o similar), ajusta para que:

No haga console.error en 401.

Interprete 401 ‚Üí usuario = null y estado authenticated = false.

retry: false y suspense: false para no disparar renderizados extra ni errores globales.

La barra lateral y CTA deber√°n reaccionar a user === null mostrando ‚ÄúEntrar / Registrarse‚Äù, sin lanzar banners ni toasts de error.

Revisi√≥n de enrutado y overlays

Asegura que no exista ning√∫n componente global que intercepte scroll o navegaci√≥n para ‚Äúredirigir a Home si no hay datos‚Äù mostrando un 404 intermedio. Ese patr√≥n crea el banner fantasma que ves.

Si hay l√≥gica de ‚Äúno hay resultados ‚Üí mostramos 404‚Äù, mu√©vela dentro de la p√°gina correspondiente (galer√≠a, detalle), como un empty state, no como 404.

Pruebas de aceptaci√≥n

No logueado: carga Home ‚Üí ning√∫n error en consola; solo un hero; al hacer scroll, no aparece ning√∫n 404.

Logueado: navega a Dashboard, Galer√≠a y Mi Cuenta ‚Üí sin overlays 404 al hacer scroll.

Forzar 404 real (ruta inexistente) ‚Üí muestra √∫nicamente la p√°gina 404 normal (sin duplicar hero ni overlays en otras rutas).

Checklist final

0 apariciones del banner 404 al hacer scroll en todas las p√°ginas.

1 sola instancia de <Hero /> en Home.

/api/auth/user 401 silencioso (sin logs rojos).

Ning√∫n cambio en l√≥gica de v√≠deos, cr√©ditos o DB.