¬°Buen curro hasta aqu√≠! üëè (suscripciones y cr√©ditos ya est√°n finos).
Ahora mismo la generaci√≥n de v√≠deos se queda en ‚ÄúProcessing‚Äù indefinidamente. Antes funcionaba.

REGLA DE ORO (no romper nada)

Nada de refactors grandes, ni tocar pagos, auth, UI o DB fuera de lo que sigue.

Cambios m√≠nimos, reversibles y con logs. Si algo falla, rollback inmediato.

Mantener compatibilidad con los jobs ya en curso.

CONTEXTO

El dashboard muestra jobs en ‚ÄúProcessing‚Äù que no salen de ah√≠.

Antes funcionaba ‚Üí se ha roto recientemente (posible regresi√≥n de cola/worker, callback, polling o mapeo de estados del proveedor).

El front ya muestra ‚ÄúWe‚Äôll reconcile automatically‚Äù, as√≠ que existen rutas/cron de reconciliaci√≥n.

OBJETIVO (Definition of Done)

Un job nuevo pasa por: queued ‚Üí processing ‚Üí ready / failed sin quedarse colgado.

La UI refleja el estado real y actualiza a ‚ÄúReady‚Äù cuando el v√≠deo est√°.

Reconciliaci√≥n autom√°tica: si un job se queda > X min en ‚Äúprocessing‚Äù, se reconsulta al proveedor y se corrige el estado.

Ning√∫n impacto en pagos/usuarios/suscripciones.

PLAN DE ACCI√ìN (paso a paso)

Diagn√≥stico r√°pido

Server logs: buscar errores en endpoints de creaci√≥n/consulta de jobs, timeouts, exceptions no capturadas.

Ver si el worker/cron de reconciliaci√≥n est√° corriendo. Si depende del mismo proceso, confirmar que no qued√≥ deshabilitado tras los cambios de billing.

Confirmar que guardamos provider_job_id al crear el job y que el polling lo usa.

Comprobar mapeo de estados del proveedor ‚Üí queued|running|succeeded|failed ‚Üí queued|processing|ready|failed.

Hardening de estados

En DB (tabla videos/jobs): asegurar campos status, provider_job_id, thumbnail_url, video_url, updated_at.

Crear transici√≥n segura:

a) Al crear: queued.

b) Enviar al proveedor ‚Üí processing y guardar provider_job_id.

c) Polling/cron: consultar estado remoto y:

succeeded ‚Üí descargar/registrar video_url, generar/guardar thumbnail (frame 1s), set ready.

failed ‚Üí set failed (+ error_message).

Timeout de seguridad: si processing > 12 min, forzar reconsulta; si el proveedor dice succeeded, pasamos a ready. Si no, reintento (hasta 2) y luego failed.

Reconciliaci√≥n autom√°tica

Tarea cada 2 min: WHERE status='processing' AND updated_at < now()-interval '2 minutes'.

Reconsulta al proveedor y corrige estado. Loguear "reconciled_to=ready|failed".

API y front

GET /api/videos y GET /api/videos/:id: deben devolver status, progress (si existe), video_url, thumbnail_url.

En el front (lista de Active Jobs): repoll cada 5s mientras status in ['queued','processing']. Al cambiar a ready, refrescar tarjeta.

Si failed, mostrar toast con opci√≥n ‚ÄúReintentar‚Äù que crea un nuevo job (sin borrar el fallido).

Logs

Prefijo video-jobs>:

CREATE queued id=<local_id> provider_job_id=<id>

POLL id=<local_id> provider_status=<..> mapped=<..>

RECONCILE id=<local_id> old=processing new=ready

ERROR id=<local_id> msg=<..>

Pruebas

Crear 2 v√≠deos seguidos ‚Üí deben llegar a ready (<5 min).

Forzar un job ‚Äúviejo‚Äù en processing ‚Üí ver que la reconciliaci√≥n lo corrige.

Confirmar que se genera thumbnail (frame ~1s) y aparece en la galer√≠a.

ENTREGABLES

Fix peque√±o en worker/polling + cron de reconciliaci√≥n (si no estaba activo).

Mapeo de estados robusto + timeout con reintentos.

Logs video-jobs> activados.

Sin tocar ni romper: pagos, auth, UI de billing, DB de usuarios.