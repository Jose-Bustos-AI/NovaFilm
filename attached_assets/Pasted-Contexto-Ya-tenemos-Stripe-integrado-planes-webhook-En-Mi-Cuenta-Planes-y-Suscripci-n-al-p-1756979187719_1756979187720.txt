Contexto

Ya tenemos Stripe integrado (planes + webhook).

En Mi Cuenta ‚Üí Planes y Suscripci√≥n, al pulsar Suscribirme deber√≠a abrirse Stripe Checkout, pero en su lugar navega a una ruta del frontend y muestra un 404.

Causa t√≠pica: el handler del bot√≥n hace navegaci√≥n (p. ej. navigate('/api/billing/checkout?...')) en vez de fetch POST + window.location.href a la session.url retornada.

üõ°Ô∏è Regla de Oro

No romper nada de lo que ya funciona (webhooks, cr√©ditos, planes, DB). Solo tocar lo necesario para que el checkout redirija correctamente a Stripe desde el bot√≥n, con buen manejo de errores y loading.

‚úÖ Instrucciones (exactas y paso a paso)

Frontend ‚Äì Cambiar el handler del bot√≥n ‚ÄúSuscribirme‚Äù

Ubicaci√≥n: el componente de Planes y Suscripci√≥n en ‚ÄúMi Cuenta‚Äù.

Reemplazar cualquier navigate('/api/billing/checkout‚Ä¶') o <a href="/api/billing/checkout‚Ä¶"> por una llamada fetch POST:

POST /api/billing/checkout

Headers: Content-Type: application/json

Body: { "priceId": "<price_id seleccionado>" }

Esperar respuesta 200 con JSON { url: "https://checkout.stripe.com/..." }.

Si llega url, hacer window.location.assign(url) (o window.location.href = url).

A√±adir loading state en el bot√≥n (deshabilitar durante la petici√≥n) y toasts/mensajes para:

401 ‚Üí ‚ÄúInicia sesi√≥n para suscribirte‚Äù.

400 ‚Üí ‚ÄúPrecio inv√°lido o faltan datos‚Äù.

500 ‚Üí ‚ÄúNo se pudo iniciar el pago. Int√©ntalo de nuevo‚Äù.

Evitar doble click mientras est√° cargando.

Backend ‚Äì Asegurar contrato del endpoint

Endpoint: POST /api/billing/checkout (ya existe; solo verificar).

Debe:

Validar sesi√≥n (si no, 401 JSON).

Leer priceId del body (no query). Si falta ‚Üí 400 JSON.

Crear Checkout Session de Stripe en modo subscription con:

mode: 'subscription'

line_items: [{ price: priceId, quantity: 1 }]

success_url: ${APP_BASE_URL}/billing/success?session_id={CHECKOUT_SESSION_ID}

cancel_url: ${APP_BASE_URL}/account?canceled=1

client_reference_id: user.id

customer_email: user.email (si est√° disponible)

No hacer redirects del servidor. Responder JSON { url: session.url }.

Si el endpoint ya hac√≠a res.redirect(session.url), c√°mbialo a res.json({ url: session.url }) (para que el router del frontend no intercepte nada).

URLs y ENV (comprobaci√≥n r√°pida)

En el backend, APP_BASE_URL debe apuntar a tu URL de la app (replit) sin trailing slash.

success_url y cancel_url deben ser absolutas (como arriba), no relativas.

Los priceId del frontend deben venir de /api/billing/plans (o del mapping backend) para que coincidan con los STRIPE_PRICE_* actuales.

Verificaci√≥n

Abrir DevTools ‚Üí pesta√±a Network.

Click en ‚ÄúSuscribirme‚Äù:

Ver que se hace POST a /api/billing/checkout (no una navegaci√≥n).

Respuesta 200 con { url: ... }.

El navegador redirige a Stripe (no aparece tu 404).

Completar pago de prueba ‚Üí volver a la app (success URL) ‚Üí comprobar cr√©ditos y plan activo.

Manejo de errores (UX)

Si el POST falla, mostrar un aviso claro y dejar el bot√≥n disponible otra vez.

Si el servidor responde sin url, mostrar: ‚ÄúNo se pudo iniciar el pago. Int√©ntalo en unos minutos.‚Äù

Notas r√°pidas de diagn√≥stico (por si algo persiste)

Si sigues viendo el 404, casi seguro el bot√≥n sigue intentando navegar a una ruta local (router) en vez de hacer fetch.

Confirma que el endpoint devuelve JSON y no redirige.

Si no llega a Stripe y en Network ves un GET /api/billing/checkout (y no un POST), el handler est√° mal.

Si el POST da 401, tienes que loguearte antes.

Si el POST da 200 pero sin url, revisa logs del servidor (Stripe pudo lanzar un error creando la sesi√≥n; revisa STRIPE_SECRET_KEY, priceId).