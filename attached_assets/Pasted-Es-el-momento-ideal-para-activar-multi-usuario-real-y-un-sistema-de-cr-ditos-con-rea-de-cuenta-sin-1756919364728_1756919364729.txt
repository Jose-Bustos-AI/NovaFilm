Es el momento ideal para activar multi-usuario real y un sistema de cr√©ditos con √°rea de cuenta, sin romper nada del flujo actual.

üß† Contexto

Ahora mismo autenticamos con Replit Auth y guardamos sesi√≥n en sessions.

Tenemos tablas users, videos, jobs y todo se filtra por user_id.

Queremos:

Que cada usuario solo vea sus propios videos.

Cr√©ditos por usuario (p. ej. 1 cr√©dito = 1 video).

P√°gina de Cuenta: cr√©ditos disponibles, historial b√°sico, editar perfil (nombre, avatar), logout, y bot√≥n de cancelar suscripci√≥n (placeholder hasta integrar pagos).

Preparar el terreno para Stripe (o similar) m√°s adelante, sin bloquear la versi√≥n actual.

üõë Regla de oro (NO romper nada)

Mant√©n Replit Auth tal como est√° (es decir, no cambies el proveedor de auth).

Toda la l√≥gica nueva debe ser compatible con lo existente: rutas, callbacks, polling, DB y UI actual.

Si faltan datos o algo falla, debe degradar con gracia (nunca impedir la generaci√≥n si hay cr√©ditos, nunca exponer datos de otros usuarios).

‚úÖ Instrucciones
1) Esquema de base de datos (Drizzle / Neon)

Extender users y crear tablas para cr√©ditos:

users (a√±adir campos si no existen):

plan text DEFAULT 'free'

credits_remaining integer NOT NULL DEFAULT 0

subscription_status text DEFAULT 'inactive' // valores: 'inactive' | 'trialing' | 'active' | 'canceled'

stripe_customer_id text NULL

canceled_at timestamp NULL

updated_at timestamp NOT NULL DEFAULT now()

credits_ledger (NUEVA):

id uuid pk

user_id varchar NOT NULL (fk ‚Üí users.id)

delta integer NOT NULL // +N recarga, ‚àí1 consumo

reason text NOT NULL // 'video_generation' | 'manual_grant' | 'promo' | 'refund'

job_id uuid NULL // opcional, enlazar al job si aplica

created_at timestamp DEFAULT now()

√çndices por user_id, created_at.

Migraciones: crear migraci√≥n, aplicar con npm run db:push. No borres ni modifiques datos existentes.

2) Semillas & compatibilidad

En el login (o cuando se crea un usuario nuevo en users), si credits_remaining es NULL o 0 y es primera vez, asignar cr√©ditos de bienvenida (p. ej. 5).

Registra tambi√©n una fila en credits_ledger (+5, reason: promo).

3) Consumo de cr√©ditos (transaccional)

En POST /api/create-job:

Antes de llamar a Kie.ai, inicia transacci√≥n:

Leer users.credits_remaining FOR UPDATE.

Si credits_remaining < 1 ‚áí 400 con mensaje en espa√±ol: ‚ÄúNo te quedan cr√©ditos. A√±ade m√°s para generar videos.‚Äù

Decrementar en 1 y insertar credits_ledger con delta = -1, reason = 'video_generation' y job_id (si ya tienes id) o actualizar luego.

Commit.

Si falla la llamada a Kie.ai, reversa el consumo (a√±adir +1 en ledger y sumar de nuevo al usuario) o haz el rollback completo si la transacci√≥n abarca todo.

Importante: Mantener idempotencia en callbacks; no volver a consumir cr√©ditos en reintentos.

4) Aislamiento y seguridad de datos

Asegura que todas las rutas filtren por user_id:

GET /api/videos, GET /api/jobs, etc. ya lo hacen: rev√≠salo y a√±ade where user_id = req.user.id en todos los casos.

En el callback: la upsert por taskId debe conservar el user_id del job original; nunca aceptar un callback que asigne a otro usuario.

5) API de Cuenta

Nuevas rutas bajo /api/account (todas requieren auth):

GET /api/account/me
Devuelve perfil del usuario: { id, email, first_name, last_name, profile_image_url, plan, credits_remaining, subscription_status, created_at }.

PATCH /api/account/me
Permite actualizar first_name, last_name, profile_image_url. Validar con Zod.

GET /api/account/credits
Devuelve { credits_remaining, ledger: [ {delta, reason, job_id, created_at} ] } (limit 50, orden desc).

POST /api/account/subscription/cancel (placeholder)

Marca subscription_status = 'canceled', canceled_at = now().

Devuelve { ok: true, message: 'Suscripci√≥n cancelada. Mantienes acceso hasta fin de ciclo.' }.

No integra Stripe a√∫n, solo deja el dato listo.

POST /api/logout

Cierra sesi√≥n Replit/express-session como ya haces.

6) UI: √Årea de Cuenta

Nueva p√°gina ‚ÄúAccount / Mi Cuenta‚Äù accesible desde el sidebar o avatar:

Resumen:

Avatar, nombre, email.

Cr√©ditos disponibles (grande).

Estado de suscripci√≥n (badge: Free, Trial, Active, Canceled).

Acciones:

Bot√≥n ‚ÄúA√±adir cr√©ditos‚Äù (placeholder ‚Üí abre modal informativo hasta integrar Stripe).

Bot√≥n ‚ÄúCancelar suscripci√≥n‚Äù (llama al endpoint placeholder).

Bot√≥n ‚ÄúCerrar sesi√≥n‚Äù.

Historial de cr√©ditos (tabla simple):

Fecha, cambio (+/-), motivo, job_id (link a video si existe).

Edici√≥n de perfil:

Inputs para nombre/apellido y avatar (URL por ahora).

Guardar con PATCH /api/account/me.

Todo en espa√±ol. Mantener la est√©tica actual (cards, badges, toasts).

7) Interacci√≥n con el dashboard

Donde ya mostr√°is ‚ÄúCredits Left‚Äù, leer de users.credits_remaining (poll cada 60s o al finalizar un job).

En el chat, si credits_remaining < 1, deshabilitar el bot√≥n Generar y mostrar aviso: ‚ÄúSin cr√©ditos ‚Äî A√±ade m√°s para continuar.‚Äù

8) Preparativos para pagos (sin integrar a√∫n)

En users dejamos stripe_customer_id y subscription_status.

Crea un endpoint placeholder POST /api/billing/create-checkout que devuelva { url: '/pricing' } o algo neutro. M√°s adelante lo conectamos a Stripe.

No bloquear ning√∫n flujo por esto.

9) Logs y m√©tricas

A√±adir logs estructurados al consumir cr√©ditos y al cancelarse la suscripci√≥n.

A√±adir contadores simples (p. ej., videos_generados_hoy_por_usuario) en logs para monitorizar uso (no en DB).

10) Pruebas de aceptaci√≥n

Usuario nuevo: recibe cr√©ditos de bienvenida y puede generar 1 video ‚Üí cr√©ditos bajan 1 y ledger registra -1.

Usuario sin cr√©ditos: bot√≥n de generar deshabilitado y API devuelve 400 amigable.

Cada usuario ve solo sus videos/ledger.

Editar perfil funciona y persiste.

Cancelar suscripci√≥n cambia subscription_status y muestra el nuevo estado en la UI.